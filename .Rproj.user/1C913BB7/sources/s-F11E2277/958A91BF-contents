---
title: "R Workshop"
author: "Charlie Keown-Stoneman and David Dai"
date: "November 6, 2018"
output:
  slidy_presentation:
    css: styles.css
    incremental: false
---
```{r setup, include=FALSE}
library(knitr)
library(ggplot2)
# library(gganimate)
knitr::opts_chunk$set(echo = FALSE)

####St Michael's Colour scheme###

#Dark blue: 	R:64 G:96 Blue:175 (Hue:148, Sat:111, Lum:112)
SMH_dblue <- rgb(64, 96, 175, maxColorValue=255)

#Light blue: 	R:114 G:199 Blue:231 (Hue:131, Sat:170, Lum:162)
SMH_lblue <- rgb(114, 199, 231, maxColorValue=255)
```

## R Basics

> - Freely available programming language and environment (Open source)
> - Can be installed on Windows, Mac, or Linux operating systems
> - Widely used in the statistical community
> - Object oriented programming language that can be run line-by-line (great for debugging!)
> - Added functionality based on community developed packages
> - Base **R** is regularily updated

## CRAN

The <b>C</b>omprehensive <b>R</b> <b>A</b>rchive <b>N</b>etwork

> - "CRAN is a network of ftp and web servers around the world that store identical, up-to-date, versions of code and documentation for **R**." (https://cran.r-project.org/)
> - Installation files for **R** available from CRAN
> - CRAN stores and curates user made packages for **R**
> - Member institutions in many countries (e.g. The University of Toronto is part of CRAN)

## CRAN

<img class="center-fit" src="CRAN.png" alt="Original console">

## Original R Console (for Windows)

<img class="center-fit" src="old_console.png" alt="Original console">

## RStudio

> - Graphical User Interface (GUI) for **R**
> - Highly customizable interface, both aesthetically and functionally
>     - editor has syntax highlighting (code changes colour based on syntax, very useful!)
> - Makes organization of **R** scripts much easier (in both tabs and projects)
> - Adds user-friendly approaches for:
>     - viewing data
>     - keeping track of objects in the workspace
>     - creating plots
> - Has support for other programming languages (e.g. C++)

## RStudio

<img class="center-fit" src="rstudio.png" alt="RStudio console">


## R code/environment
> - Each session of **R** has a global environment, also known as the 'workspace' where objects are stored
> - The <font face="courier new">#</font> symbol (a.k.a. pound/hash/octothorpe) is used for comments within **R** code 
> - **R** syntax is case sensitive, e.g. <font face="courier new">x</font> is different from <font face="courier new">X</font>
> - No special character for termination of a line (unlike some other languages, such as ; in SAS, C, and Java)
> - Tabs/extra white spaces are great for readability, but not important for syntax
> - When saving an object into memory either <font face="courier new">=</font> or <font face="courier new"><-</font> can be used
> - If you want to learn more about a specific function, including syntax and details on the output, you can use <br> <font face="courier new">?[function]</font>
> - To search all available help documents for specific text you can use <br><font face="courier new">??[text]</font>

## R basics - Variable classes/types
There are a few variable classes available in **R**. Most predominantly, you will encounter the following.

Variable class | What data? | Example
------|-------------------------| -------------------------
numeric, int| numbers, integers | Temperature
char | Characters, strings | "Subject1", "Subject2"
Date | Dates | `r Sys.Date()`
logical | TRUE/FALSE | 3 > 1 (TRUE)
------|-------------------------| -------------------------
factor | Categorical variables | Yes/No, Male/Female
vector | 1-dimensional assortment of values | One column or row of data
matrix | 2-dimensional assortment of values | Combination of vectors
array | n-dimensional assortment of values | Combination of vectors/matrices
data.frame | 2-dimensional, R's "dataset" class | Looks like a matrix, but different properties
------|-------------------------|-------------------------
list | 1-dimensional assortment of any of the above (even mixtures) | 

Misc: You can use the **class()** function to check the class of a variable

## Packages

> - Packages are sets of functions, code, and/or example data built for specific purposes
> - Some packages implement a specific type of analysis (e.g. the <b><font face="courier new">survival</font></b> package for survival analysis)
> - Other packages add other types of functionality, such as more graphing options (e.g. the <b><font face="courier new">ggplot2</font></b> package)
> - Anyone can make a package, but 'official' packages are approved of and stored within CRAN
> - To use a package that is not part of the base installation of **R** you must:
>     - download and install the package (this can be done from within R/RStudio, and only needs to be done once) using <font face="courier new">install.packages("[package name]")</font>
>     - load the package into the current workspace using <font face="courier new">library([package name])</font> (this must be done in each **R** session)

## Plots
One useful aspect of **R** is the customizability of plots.

> - Most plots are either created in the original default plotting environment or using the <b><font face="courier new">ggplot2</font></b> package
> - Default options are not always as nice looking as in other programs (e.g. SAS/Excel)
> - However, plots in **R** are very customizable, with some time and effort they can look great!

## Plots
Here is an example of the default plotting environment,
```{r, echo = TRUE}
#Load iris example data and move its variables into the global R environment
data(iris)
attach(iris)
#Plot sepal width by sepal length, with different colours for the different species
plot(x = Sepal.Length, y = Sepal.Width, col=Species, main="Example Plot Title")
```

## Plots
```{r, echo = TRUE}
#Remake plot with different symbols for the different species
plot(x = Sepal.Length, y = Sepal.Width, col=Species, pch=as.numeric(Species), main="Example Plot Title")
#Add a legend to the plot
legend("topright",  legend=c("setosa","versicolor","virginica"), col=1:3, pch=1:3)
```

## Generating data

R can be used for statistical simulations, and has many built in functions for randomly generating data from different distributions

For example, <br>
Normal distribution: 
```{r, echo = TRUE}
#Generate Data
x = rnorm(n=10000, mean=0, sd=1)
#Plot histogram
hist(x, col=SMH_lblue, breaks=100, freq=FALSE)
#Add line for normal distribution it was generated from
curve(dnorm,col=SMH_dblue,add=TRUE, lwd=3)
```

##

Now let's look at what some of this looks like in RStudio!

## Beyond Base R

> - R was created with analysis in mind, and remains one of the best languages for working with data
> - With the introduction of newer packages, more doors have opened up for new and experienced R users

## 

![https://redmonk.com/sogrady/2018/08/10/language-rankings-6-18/](http://sogrady-media.redmonk.com/sogrady/files/2018/08/lang.rank_.618-1.png)

## Beyond Base R

1. Promoting *consistency* and *inclusivity*
    + Lack of consistent style and syntax -> hard to teach and learn
    + TONS of packages -> many ways to do the same thing
    + Consistent coding style is a first step towards allowing more diverse user-base
    + [**tidyverse**](https://www.tidyverse.org)

## The tidyverse

"The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying *design philosophy, grammar, and data structures*." - [**tidyverse**](https://www.tidyverse.org) 

> - **CONSISTENCY** and **COMPLETENESS**

## Beyond Base R

2. Going beyond statistics
    + R was designed as a language for data analysis
    + Recent R implementations of packages from other languages enables R users beyond data analysis
    + [**R Shiny**](https://shiny.rstudio.com)
    
## R Shiny

"Shiny is an R package that makes it easy to build interactive web apps straight from R." - [Shiny, RStudio](https://shiny.rstudio.com)

- Allows R users to leverage powerful tools borrowed from Javascript and HTML to build a **data product**    
    
## R Shiny Example 1: Papr

[Papr](https://jhubiostatistics.shinyapps.io/papr/), the Tinder of academic pre-prints.

## R Shiny Example 2: Time series forcasting Tool

[Time series and intervention analysis tool](https://www.chartdatascience.ca/lks-chart-tools), developed by [LKS-CHART](https://www.chartdatascience.ca/). 

## More Shiny examples...

...[here](http://shiny.rstudio.com/gallery/)

## Resources

1. [R for Data Science](https://r4ds.had.co.nz/index.html)
    + Comprehensive textbook for learning R and data analysis in the "tidyverse" framework
    + Great learning tool for new R users and reference text for experienced R users
 
2. [R style guide](https://style.tidyverse.org/)
	+ Having consistent coding style will improve learning process, and
	+ Having readable code will improve your relationship with your team members :)

## Thanks!

Any questions?

Charlie Keown-Stoneman, KeownStonemC@smh.ca

David Dai, [\@dwhdai](https://twitter.com/dwhdai), DaiW@smh.ca

